Q1: What are the major changes introduced in Java 7 and Java 17?
A1: In Java 7, the permission space was removed, and in Java 17, meta space was added. Also, there is no "stop-the-world" effect, and memory is divided into blocks based on server configuration.

Q2: How does Java handle large linked lists within a bucket?
A2: If the linked list size within a bucket exceeds a threshold, it is converted into a tree-like structure to optimize performance.

Q3: How is memory managed for collections in Java?
A3: There is no fixed limit. Collections like arrays are used, and the system looks for continuous memory locations. The size of collections can dynamically grow, for example, around 65,536 elements.

Q4: How does serialization work in Java?
A4: Serialization is not enabled by default. If a class is not implementing the Serializable interface, it won't be serialized. To prevent issues, one can check the serial version ID in the constructor. Alternatively, the readExternalizable interface can be used with the readResolve method to control the deserialization process.

Q5: How does Java Singleton differ from Spring Singleton?
A5: In Java, the Singleton pattern operates at the object level, ensuring only one instance of a class. In Spring, the Singleton pattern works at the bean ID level. If the bean's ID changes, you can create another instance. If alias names are provided, it could break the singleton nature by creating multiple instances.

Q6: How does Spring manage beans?
A6: In Spring, beans are typically created as singletons. If alias names are given to the beans (e.g., one bean with a lowercase "a" and another with a lowercase "b"), the singleton nature might be compromised, and multiple instances could be created. But without aliases, only one instance would be created.

Q7: How does Spring WebClient handle blocking and non-blocking calls?
A7: WebClient, which is part of the WebFlux module, allows both blocking and non-blocking calls. For a synchronous call, you can use .block() at the end of the request chain. This makes the WebClient behave in a blocking manner, effectively making the call synchronous.

Q8: Can you use @Autowired with constructor-based or setter-based injection in Spring?
A8: Yes, both constructor-based and setter-based injection can be used with the @Autowired annotation. When using a singleton bean, Spring ensures only one instance of the prototype bean is used throughout the lifecycle, even if it's injected multiple times.

Q9: How does transaction management work with Spring AOP?
A9: In Spring, transaction management can be achieved using proxy objects. These proxies allow you to intercept method calls before invoking the real object and after the method returns, thus enabling functionality like rollback or transaction management.

Q10: How is Spring Security integrated with OAuth 2.0?
A10: Spring Security integrates with OAuth 2.0 for authentication and authorization. It works with an internal authorization server that issues tokens for secured endpoints. The integration ensures that only authorized users can access protected resources.

Q11: How does the Command Query Responsibility Segregation (CQRS) pattern work in microservices?
A11: In microservices, the CQRS pattern allows data retrieval from multiple databases. Each microservice is responsible for a specific part of the data. The data is then aggregated to build a combined response, optimizing query performance and scalability.

Q12: How does JSON Web Token (JWT) work with Spring Security?
A12: JWT consists of three parts: the header, payload, and signature. The header contains information about the algorithm used for signing the token, the payload contains user claims (such as user details or roles), and the signature is the hash of the header and payload to ensure integrity.
