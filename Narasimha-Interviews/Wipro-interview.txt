Q1: What is the main focus of the delivery agent application you worked on?

A1: The main focus was on developing a delivery agent portal for Amazon, where I worked with microservices architecture. This system communicated vendor data to delivery agents, ensuring a smooth process for assigning and delivering packages using an event-driven microservices architecture with Kafka.

Q2: Can you explain the technologies and tools you used in the project?

A2: The project used technologies such as Java, Spring, Spring Boot, Kafka for event-driven architecture, and AWS for cloud services. We also utilized microservices architecture, where each service communicates independently with others. Front-end technologies like HTML, CSS, React, and Angular were used for UI components. We employed AWS tools like S3, ECS, S3 bucket, and Cognito for various functionalities.

Q3: What is the significance of event-driven architecture in the system?

A3: Event-driven architecture was crucial for handling asynchronous operations. We used Kafka for message communication between microservices. This allowed seamless communication between vendors and delivery agents, ensuring that the delivery process is efficient and scalable. It also enabled each microservice to work independently while maintaining data integrity.

Q4: How did you implement microservices architecture in this project?

A4: We implemented microservices by splitting the system into independent services based on business needs. Each microservice was responsible for a specific function, such as vendor communication or delivery agent management. We used an API gateway to route requests and implemented tracing systems to monitor logs for better issue identification. The services communicated asynchronously, ensuring scalability and fault tolerance.

Q5: How did you ensure that each microservice functioned independently?

A5: Each microservice was designed with a clear boundary and focused on a single business capability, following Domain-Driven Design (DDD) principles. We ensured each service was loosely coupled, meaning it could operate independently without impacting other services. This setup made it easier to maintain, scale, and deploy microservices individually.

Q6: Can you describe the agile methodology used in your team?

A6: In our team, we followed agile practices with a 2-week sprint cycle. During each sprint, we conducted retrospective meetings where we evaluated the progress, discussed challenges, and analyzed how much time we spent on each user story. This helped us adjust and improve our processes for the next sprint, ensuring continuous progress and alignment with project goals.

Q7: What were the challenges you faced during the development of the delivery agent portal?

A7: Some challenges included ensuring efficient communication between microservices, handling large volumes of real-time data from vendors and delivery agents, and maintaining system scalability. We also had to address issues related to routing and system integration between various services.

Q8: How did you handle system monitoring and issue resolution?

A8: We implemented a tracing and logging system within our microservices to monitor each service's activity and performance. By using Kafka and other monitoring tools, we were able to identify and address issues quickly. Additionally, we used an API gateway for efficient service routing and performed regular checks on the system to ensure smooth functioning.

Q9: Can you explain your experience with cloud computing and AWS?

A9: I have hands-on experience with AWS, including services like S3, ECS, Cognito, and others. I have used AWS for cloud deployment, data storage, and user authentication. AWS provided us with the scalability and flexibility needed to support our microservices architecture.

Q10: How do you approach learning and working with new technologies?

A10: I stay up to date with the latest trends and technologies by studying documentation, participating in online communities, and experimenting with new tools. I always strive to understand the core concepts before applying them to a project. Additionally, I collaborate with team members to share knowledge and learn together.

Q11: Can you explain your approach to debugging and issue resolution in a microservices environment?

A11: In a microservices environment, debugging can be complex, so I use tools for logging, tracing, and monitoring to track issues. I start by isolating the problematic service and analyzing logs for error patterns. If needed, I run tests to reproduce the issue and work on fixes in a test environment before deploying them in production.

Q12: How do you manage data within a microservices architecture?

A12: Data management is handled by ensuring that each microservice has its own database, allowing it to operate independently. We follow the principle of "Database per Service," which ensures that services are loosely coupled. For communication between services, we use asynchronous messaging via Kafka to keep data in sync.

