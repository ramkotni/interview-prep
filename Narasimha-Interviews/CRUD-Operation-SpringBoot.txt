To build a CRUD (Create, Read, Update, Delete) application in Spring Boot, let’s walk through a simple example that covers the essentials:

1. Setup and Dependencies
First, create a new Spring Boot project and add the required dependencies to pom.xml:

Spring Web (for building web applications and RESTful APIs)
Spring Data JPA (for database interaction)
H2 Database (for an in-memory database)
Your pom.xml dependencies might look like this:

xml
Copy code
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>
2. Create a Model Class
Define a model class to represent the data. In this example, let's create an entity called Employee:

java
Copy code
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Employee {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    private String role;

    // Constructors, Getters, and Setters
}
3. Create a Repository Interface
Use Spring Data JPA’s JpaRepository to manage the Employee entity. This repository interface provides CRUD methods out of the box.

java
Copy code
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
}
4. Create a Service Layer
The service layer will handle the business logic. It will interact with the repository and perform operations like saving, retrieving, updating, and deleting employees.

java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Optional<Employee> getEmployeeById(Long id) {
        return employeeRepository.findById(id);
    }

    public Employee saveEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }
}
5. Create a REST Controller
This controller will expose the CRUD operations as RESTful API endpoints.

java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/{id}")
    public Optional<Employee> getEmployeeById(@PathVariable Long id) {
        return employeeService.getEmployeeById(id);
    }

    @PostMapping
    public Employee createEmployee(@RequestBody Employee employee) {
        return employeeService.saveEmployee(employee);
    }

    @PutMapping("/{id}")
    public Employee updateEmployee(@PathVariable Long id, @RequestBody Employee employeeDetails) {
        Employee employee = employeeService.getEmployeeById(id).orElseThrow();
        employee.setName(employeeDetails.getName());
        employee.setRole(employeeDetails.getRole());
        return employeeService.saveEmployee(employee);
    }

    @DeleteMapping("/{id}")
    public void deleteEmployee(@PathVariable Long id) {
        employeeService.deleteEmployee(id);
    }
}
6. Configure H2 Database (optional)
To set up an H2 in-memory database, add the following to your application.properties file:

properties
Copy code
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
7. Testing the API Endpoints
After running the Spring Boot application, you can test the API endpoints using tools like Postman or cURL:

Create an Employee: POST /api/employees with JSON body {"name": "John", "role": "Developer"}
Get All Employees: GET /api/employees
Get Employee by ID: GET /api/employees/{id}
Update Employee: PUT /api/employees/{id} with JSON body {"name": "Jane", "role": "Manager"}
Delete Employee: DELETE /api/employees/{id}
This example shows how to create a complete CRUD application using Spring Boot, covering data persistence, RESTful API design, and service layer encapsulation.






